react-hot-loader
ReactDOM.render(
  element,
  container,
  [callback]
)
react特点:
  声明式设计:轻松描述应用
  高效: 对DOM的模拟,减少与DOM交互
  灵活: 与已知库或框架很好配合
  JSX:  是JS语法的扩展
  组件: React构建组件,代码复用
  单向响应的数据流: 减少重复代码,比传统数据绑定更简单

react JSX: <script type="text/babel">code...</script>
  特点:
    React用JSX来替代常规的JS,JSX是JS语法扩展
    JSX执行更快,因为编译为JS代码后进行了优化,编译过程中就能发现错误
    JSX编写模板更简单快速,需使用JSX,则<script>标签type为text/babel
  模板: 多个html标签时用div包裹 ReactDOM.render(para1,para2);
    ReactDOM.render(
      <div>
        <h1>perhaps</h1>
        <h2>欢迎学习React</h2>
      </div>
      ,
      document.getElementById('example')
    );
  JS和CSS:
    JS表达式,写在花括号{}中
    注释: {/*注释...*/}
    内联样式: 
      var style = {fontsize:30px,color:red};
      ReactDOM.render(
        <div><h1 style={style}>hello</h1></div>,
        document.getElementById("example")
      );
    数组: 
      var arr=[<h1>hello</h1>,<h2>world</h2>];
      ReactDOM.render(<div>{arr}</div>,docu...);
    html标签: (小写)
      var myDiv = <div className="yeah">hello</div>;
      ReactDOM.render(myDiv,docu...);
        React DOM用className和htmlFor代替class和for属性
    JSX组件: (大写开头)
      var MyDiv = React.creatClass({/*注释*/});
      var myElement = <MyDiv property={true}/>;
      ReactDOM.render(myElement,docu...);
 
组件:
  React.createClass(object)方法生成组件类HelloMessage
    <HelloMessage />实例组件类并输出信息
  原生HTML元素名小写开头,自定义React类名大写开头,组件类只能包含一个顶层标签
    var HelloMessage = React.creatClass({
      render: function() {
        return <h1>hello {this.props.name}</h1>;
      }
    });
    ReactDOM.render({
       <HelloMessage name="perhaps"/>
       document.getElementById('example');
    })

state：
  更新组件的state,根据新state重新渲染用户界面
props:
  getDefaultProps()方法为 props设置默认值
  props验证使用propTypes,可保证组件被正确使用,
    React.PropTypes提供很多验证器(validator)来验证传入数据是否有效。props传入无效数据时,JS控制台会抛出警告。

组件API:
  设置状态：setState
    setState(object nextState[, function callback]);
      nextState,设置新状态,会和当前state合并
      callback,可选,回调函数。在setState设置成功且组件重新渲染后调用.传入参数为this.state
  替换状态：replaceState
  设置属性：setProps
  替换属性：replaceProps
  强制更新：forceUpdate
  获取DOM节点：findDOMNode
  判断组件挂载状态：isMounted

组件生命周期:
  三个状态:
    Mounting：已插入真实DOM
    Updating：正在被重新渲染
    Unmounting：已移出真实DOM
  方法:
    componentWillMount 渲染前调用,在客户端也在服务端。
    componentDidMount : 第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)。
    componentWillReceiveProps 在组件接收到一个新的prop时被调用。这个方法在初始化render时不会被调用。
    shouldComponentUpdate 返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。 
    可以在你确认不需要更新组件时使用。
    componentWillUpdate在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。
    componentDidUpdate 在组件完成更新后立即调用。在初始化时不会被调用。
    componentWillUnmount在组件从DOM中移除的时候立刻被调用。

中文教程：http://www.react-cn.com/docs/jsx-in-depth.html