参考
    官方文档: https://code.visualstudio.com/docs#vscode
    中文文档: https://jeasonstudio.gitbooks.io/vscode-cn-doc/content/
快捷键
    切换自动换行 alt+z
    多行编辑 ctrl+alt+箭头|alt+f3
    多列选择 alt+shift+鼠标或箭头
    复制该行 ctrl+shift+d,删除行 ctrl+shift+k
    注释 ctrl+/ 或者 ctrl+shift+/
    f2可以重命名一个变量，右键也行
    代码折叠 ctrl+shift+[, 点击'-'也行
        全部打开 ctrl+k ctrl+0
        全部折叠 ctrl+k ctrl+9(自己定义的)
    移动代码 ctrl+[
    代码错误警告 ctrl+k n
    转化为小写 ctrl+k ctrl+l
    关闭当前文件 alt+f4
    全屏模式: f11
    zen模式：shift+f11 (只看代码)
    多行代码变成一行: ctrl+j
    切换侧边栏可见性: ctrl+b
    定位到指定行数: ctrl+g

自定义快捷键
    全部折叠: ctrl+k ctrl+9
    emmet: tab改成了'alt+c e'
    新建文件: ctrl+alt+n
    代码格式化: alt+c b
    color picker: alt+c p|c
    代码提醒细节显示: ctrl+alt+space

问题: 
    集成终端错位：打开命令行，右键属性->使用旧版控制台

插件：
    `advanced new file: 新建文件， 快捷键 ctrl+alt+n
        设置user:     "newFile.showFullPath": false, //将当前文件路径设为新建文件的路径
    `beautify: 代码格式化，设置快捷键为"alt+c b",
        设置方法: open keyboard shortcuts ->搜索HookyQR.beautify
        设置文件: .jsbeautifyrc, 参考：https://github.com/victorporof/Sublime-HTMLPrettify/blob/master/.jsbeautifyrc
    `color picker: alt+c p|c 颜色面板|改变表示方式
        设置user:    "colorHelper.pickerForm": "simple" //面板设置为简单模式
    debugger for chrome:
    `eslint: 先npm i -g eslint，vscode也装eslint，然后命令面板->eslint:create '.eslintrc.json' file
        .eslintrc.json配置：http://eslint.cn/docs/user-guide/configuring
        .eslintignore文件是纯文本文件，每一行都是glob模式表哪些路径应该忽略检测
    `GBKtoUTF8: 自动把文件编码方式换成utf8
    `git history(git log): view file|git|line history
    `HTML Snippets: html代码提醒
        设置user: 允许在其他哪些文件使用html代码提醒
        "files.associations": {
            "*.ejs": "html",
            "*.js": "html"
        }
    intellisense for css class name: 用不了？？？
    `vscode-icons: 在每个文件前添加图标；
        使用: 命令面板 -> preferences: file icon theme -> vscode icon
    `powershell`: 智能感知
        "terminal.integrated.shell.windows": "C:\\WINDOWS\\Sysnative\\WindowsPowerShell\\v1.0\\powershell.exe",
    `markdownlint`:
      `markdown:open preview to the side`：打开侧边预览
      `markdown:open preview`：打开预览
    `prettify json: 命令面板 -> prettify json即可, 要求是json文件里不能有注释，不然用不了这个插件
    `sublime text keymap`
    `view in browser`
    vetur
    vue
    `vue 2 snippets
    `filesize: 左下角显示文件大小，点击可显示详细信息
    `vue-beautify`: 
    `settings sync`: 同步vscode的设置，需要先在github gist中得到token的值，然后在vscode中命令面板'sync:upload settings'就能上传设置，在另一个电脑'sync:download settings'输入gist的值就能获取设置


setting:
    用户设置：命令面板 -> preferences: open user setting ->  点击行前面那只笔就能设置
    工作区设置：命令面板 -> preferences: open workspace setting
    特定语言设置：命令面板 -> preferences: configure language special setting
    界面语言: 命令面板 -> configure language

左边工具栏：
    搜索：ctrl+shift+f 可以搜索整个工作区文件，找到指定代码

调试:
    //https://code.visualstudio.com/docs/editor/debugging
    断点: f9
    step into|out|over: f11|shift+f11|f10
    启动|停止|重启: f5|shift+f5|ctrl+shift+f5
    launch.json中
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "启动程序",
            "program": "${file}"//基于当前文件调试
            // "program": "${workspaceRoot}\\src\\main.js"
        }
    ]
}
configurations属性
    // 基本配置
    type - 配置类型
    request - 请求配置类型,值为"launch"或"attach"
    name - 配置名称,在启动配置下拉菜单显示

    // 可选择的配置
    preLaunchTask - 调试会话开始前需运行的任务, 任务在tasks.json里
    internalConsoleOptions - 内部调试控制台的控制行为
    debugServer - 仅用于调试扩展开发: 如果执行端口，则尝试连接到服务器模式中的调试适配器

    // 很多debug调试器用到的属性
    program - 程序的绝对路径: 通过查看package.json的值
    args - 传递给program的参数
    env - 传递给program的环境变量
    cwd - 工作目录的绝对路径current working directory
    port - 调试要附加的端口
    stopOnEntry - 启动后自动停止程序
    console - 启动调试控制台的位置, 值为internalConsole, integratedTerminal, externalTerminal.

查找时正则的使用:
    （(.+?)） 替换成 ($1)
