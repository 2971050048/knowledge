//http://es6.ruanyifeng.com/#docs/module
Module的语法
import { stat, exists, readFile } from 'fs';
    从fs模块加载3个方法，其他方法不加载。这种加载称为“编译时加载”或者静态加载，
    Node的require方法是运行时加载模块。
ES6 的模块自动采用严格模式,严格模式主要有以下限制:
    变量必须声明后再使用
    函数的参数不能有同名属性，否则报错
    不能使用with语句
    不能对只读属性赋值，否则报错
    不能使用前缀0表示八进制数，否则报错
    不能删除不可删除的属性，否则报错
    不能删除变量delete prop，会报错，只能删除属性delete global[prop]
    eval不会在它的外层作用域引入变量
    eval和arguments不能被重新赋值
    arguments不会自动反映函数参数的变化
    不能使用arguments.callee
    不能使用arguments.caller
    禁止this指向全局对象
    不能使用fn.caller和fn.arguments获取函数调用的堆栈
    增加了保留字（比如protected、static和interface）
    ES6 模块之中，顶层的this指向undefined

export命令：规定模块的对外接口
    //错误写法：
    export 1; //1
    var m = 1; //2
    export m;
    //正确写法
    export var m = 1;//1
    var m = 1;//2
    export {m};
    var n = 1;//3
    export {n as m};

import命令：大括号指定从被导模块导入的变量名。变量名与被导模块对外接口的名称相同。
    import命令具有提升效果，会提升到整个模块的头部，首先执行。
    import命令是编译阶段执行的，在代码运行之前，是静态执行，所以不能使用表达式和变量

    //profile.js
    var firstName = 'Michael';
    var lastName = 'Jackson';
    var year = 1958;
    export {firstName, lastName, year};
    //main.js
    import {firstName, lastName, year} from './profile';
    function setName(element) {
        element.textContent = firstName + ' ' + lastName;
    }
    注意：export和import输出输入变量都需要"{}"

模块整体加载：
    // circle.js
    export function area(radius) {
        return Math.PI * radius * radius;
    }
    export function circumference(radius) {
        return 2 * Math.PI * radius;
    }
    // main.js
    import * as circle from './circle';
    console.log('圆面积：' + circle.area(4));
    console.log('圆周长：' + circle.circumference(14));

export default命令：为模块指定默认输出
    //app.js
    export default function() {
        console.log('foo');
    }
    //main.js
    import custom from './app';
    custom(); //输出'foo'
    注意：此时import变量不需要'{}'
  //同时输出默认方法和变量
    //app.js
    export default function() {}
    export function each() {}
    //main.js
    import _,{each} from './app';

export和import复合写法：
    export {foo, bar} from 'app';
    //等同于
    import {foo, bar} from 'app';
    export {foo, bar};

模块的继承
    //app1.js
    export var a = 4;
    //app2.js
    export * from 'app1';
    export var b = 3;
    export default function(x) {return x * x}
    //main.js
    import * as math from 'app';//*会忽略app模块的default方法
    import exp from 'app';//加载default方法
    console.log(exp(3)); //输出：9

import()
    类似于Node的require方法，区别主要是import是异步加载，require是同步加载。

defer与async的区别是：都是异步加载的语法
    defer要等到整个页面正常渲染结束，才会执行；async一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。
    一句话，defer是“渲染完再执行”，async是“下载完就执行”。
node加载es6模块
    import './foo';
    // 依次寻找
    //   ./foo.js
    //   ./foo/package.json
    //   ./foo/index.js

    import 'baz';
    // 依次寻找
    //   ./node_modules/baz.js
    //   ./node_modules/baz/package.json
    //   ./node_modules/baz/index.js
    // 寻找上一级目录
    //   ../node_modules/baz.js
    //   ../node_modules/baz/package.json
    //   ../node_modules/baz/index.js
    // 再上一级目录

采用require命令加载ES6模块时，ES6模块的所有输出接口，会成为输入对象的属性。